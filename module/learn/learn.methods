#!/bin/bash
##################################################
##                                              ##
##             学习工具实现                      ##
##                                              ##
##################################################
complete -W "-h --help -cet -cit -cpe --compare" ftLearnEnglishRepetionDrillEveryDay
ftLearnEnglishRepetionDrillEveryDay()
{
    local ftEffect=英语每天练习
    local isEnable=true

    #可用性校验
    [[ "$isEnable" != "true" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    local dirPathTempEng=$(ftIniGetValue  $rFilePathXbashDBUser learnConfigInfo  dirPathRootExampleSentence)
    [[ -z $dirPathTempEng ]] && ftEcho -e "数据存放路径为空" && return
    local isRest=true  isModelCourseExampleText=false  isModelCourseImitateText=false isModelCompare=false
    local valCount=1 errorContent arg arg2
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))}
    case "${arg}" in
        # 说明参数解析部分 ==============
        -h | --help) ftEcho -rc "${ftEffect}" "的使用示例" "\
#=========================================================
#    ftLearnEnglishRepetionDrillEveryDay -h
#    
#    #课文默写比对练习
#    ftLearnEnglishRepetionDrillEveryDay -c
#========================================================="; return ;;
        --rely) ftEcho -rc "${ftEffect}" "的依赖说明" "\
#=========================================================
#    ${ftEffect}依赖包 $2
#    当前未安装,请安装后重新尝试
#========================================================="; return ;;
        # 变量参数解析部分 ==============
        -cet ) isModelCourseExampleText=true
             [[ -z $(which gedit) ]] && ftExample --rely "gedit" && return $resultFail
            ;;
        -cit ) isModelCourseImitateText=true
             [[ -z $(which gedit) ]] && ftExample --rely "gedit" && return $resultFail
            ;;
        -cpe | --compare ) isModelCompare=true
             [[ -z $(which bcompare) ]] && ftExample --rely "bcompare" && return $resultFail
            ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done

    #参数校验
    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftLearnEnglishRepetionDrillEveryDay -h && return $resultFail

    #例文相关
    local dirPathTemp=/tmp/ExampleTextDrill
    local filePathCompareTempText=${dirPathTemp}/tempTextDrill.txt
    local filePathCompareExampleText=${dirPathTemp}/exampleTextDrill.txt
    if $isModelCompare; then
        [[ ! -d $dirPathTemp ]] && ftEcho -e "没有练习记录无法比对" && return
        bcompare $filePathCompareTempText $filePathCompareExampleText &
        return
    fi

    #选择课程集
    local learnCourseGroupList=($(ftIniGetValue  $rFilePathXbashDBUser learnCourseInfo  courseGroupList))
    [[ -z $learnCourseGroupList ]] && ftEcho -e "当前没有可供选择的课程" && return
    local courseGroupNameSel ListSize=0
    for dev in ${learnCourseGroupList[*]} ; do
        ((ListSize+=1))
    done
    if ((  $ListSize == 1 ));then
        courseGroupNameSel=$learnCourseGroupList
    else
        local index=0
        for dev in ${learnCourseGroupList[*]} ; do
            echo "[${index}] ${dev}"
            ((index+=1))
        done
        while true; do
            ftEcho -r  "请选择课程集[0~$(expr $ListSize - 1),q](回车默认0):"
            if (( $ListSize > 9 ));then
                read dir
            else
                read -n 1 dir
            fi
            #设定默认值
             [ ${#dir} == 0 ] && dir=0
             if [ ${dir} == "q" ]; then
                return
             elif (( $dir>=$ListSize  ));then
                ftEcho -e "错误的选择：${dir}"
                continue
             elif [ -n "$(echo $dir| sed -n "/^[0-$ListSize]\+$/p")" ];then
                courseGroupNameSel=${learnCourseGroupList[$dir]}
                echo
                break
             fi
             ftEcho -e 错误的选择：$dir
        done
    fi
    
    #选择课程
    echo
    local learnCourseList=($(ftIniGetValue  $rFilePathXbashDBUser learnCourseInfo $courseGroupNameSel))
    [[ -z $learnCourseList ]] || [[ $learnCourseList == "none" ]] && ftEcho -e "当前课程集合为空" && return
    local courseNameSel
    ListSize=0
    for dev in ${learnCourseList[*]} ; do
        ((ListSize+=1))
    done
    if ((  $ListSize == 1 ));then
        courseNameSel=$learnCourseList
    else
        local index=0
        for dev in ${learnCourseList[*]} ; do
            echo "[${index}] ${dev}"
            ((index+=1))
        done
        while true; do
            ftEcho -r  "请选择课程[0~$(expr $ListSize - 1),q](回车默认0):"
            if (( $ListSize > 9 ));then
                read dir
            else
                read -n 1 dir
            fi
            #设定默认值
             [ ${#dir} == 0 ] && dir=0
             if [ ${dir} == "q" ]; then
                return
             elif (( $dir>=$ListSize  ));then
                ftEcho -e "错误的选择：${dir}"
                continue
             elif [ -n "$(echo $dir| sed -n "/^[0-$ListSize]\+$/p")" ];then
                courseNameSel=${learnCourseList[$dir]}
                echo
                break;
             fi
             ftEcho -e 错误的选择：$dir
        done
    fi

    if $isModelCourseExampleText; then
        local filePathEnglishExampleText=${dirPathTempEng}/${courseGroupNameSel}/${courseNameSel}.exampleText
        [[ "$isModelCourseImitateText" = "true" ]] && filePathEnglishExampleText=${dirPathTempEng}/${courseGroupNameSel}/${courseNameSel}.imitateText
        [[ ! -f $filePathEnglishExampleText ]] && ftEcho -e "当前课程没有录入例文" && return


        mkdir $dirPathTemp
        echo "" > $filePathCompareTempText
        cp $filePathEnglishExampleText $filePathCompareExampleText
        gedit --new-window $filePathCompareTempText $filePathCompareExampleText &
        return
    fi

    local keyRepetionDrillErrorHository="repetionDrillErrorHository_${courseGroupNameSel}_${courseNameSel}"
    local valRepetionDrillErrorHository=($(ftIniGetValue  $rFilePathXbashDBUser learnCourseInfo  $keyRepetionDrillErrorHository))
    local isRepetitionDrillMode=false
    if [[ -n $valRepetionDrillErrorHository ]]; then
        ftEcho -y "存在旧的练习记录,Y覆盖，其他任意键使用"
        read -n 1 sel
        case "$sel" in
            y | Y ) valRepetionDrillErrorHository=
                ;;
            * ) isRepetitionDrillMode=true
                ;;
        esac
    fi

    #开始练习
    local filePathEnglishBasic=${dirPathTempEng}/${courseGroupNameSel}/${courseNameSel}.english
    local filePathChineseBasic=${dirPathTempEng}/${courseGroupNameSel}/${courseNameSel}.chinese
    local fileSizeEnglishBasic=$(sed -n '$=' $filePathEnglishBasic)
    local fileSizeChineseBasic=$(sed -n '$=' $filePathChineseBasic)
    if (($fileSizeEnglishBasic==0)) \
        || (($fileSizeChineseBasic==0)) \
        || (($fileSizeChineseBasic!=$fileSizeEnglishBasic)) ; then
        ftEcho -ex "信息文件内容为空或数量不一致"
        return;
    fi

    clear
    local arrayIndexSort=$(seq 1 $fileSizeEnglishBasic | sed 's/ /\n/g' | shuf)
    if $isRepetitionDrillMode; then
        arrayIndexSort=($(echo ${valRepetionDrillErrorHository[@]} | shuf))
    fi
    local englishItem chineseItem courseNameTitle
    local courseSize=0 courseTrueCount=0 indexSort
    for i in ${arrayIndexSort[@]}; do
        indexSort=$i
        englishItem=$(awk 'NR=="'$i'"' $filePathEnglishBasic)
        chineseItem=$(awk 'NR=="'$i'"' $filePathChineseBasic)
        courseNameTitle="${courseGroupNameSel} 课程:${courseNameSel} 例句:${i}"
        ftEcho -s ${courseNameTitle}
        ftEcho -frame $chineseItem
        echo && ftEcho -s "按T显示翻译,Y已熟悉，其他任意键继续" && read -n 1 sel
        (( courseSize+=1 ))
        if [[ $sel == "y" ]] || [[ $sel == "Y" ]]; then   
            (( courseTrueCount+=1 ))
        else
            clear
            ftEcho -s ${courseNameTitle}
            ftEcho -frame  $englishItem
            echo && ftEcho -s "按Y翻译正确,其他任意键继续" && read -n 1 sel2
            if [[ $sel2 == "y" ]] || [[ $sel2 == "Y" ]]; then   
                (( courseTrueCount+=1 ))
            else
                valRepetionDrillErrorHository=(${valRepetionDrillErrorHository[@]} $indexSort)
                read -n 1 sel3
            fi
        fi
        englishItem=
        chineseItem=
        clear
    done

    #排序
    local valRepetionDrillErrorHositorySort=$(echo ${valRepetionDrillErrorHository[@]} | sed 's/ /\n/g'| sort -n)
    #记录练习数据
    ftIniDeleteItem -p $rFilePathXbashDBUser -t learnCourseInfo -i $keyRepetionDrillErrorHository
    # ftIniAddItem -p $rFilePathXbashDBUser -t learnCourseInfo -i $keyRepetionDrillErrorHository -l "${valRepetionDrillErrorHository[*]}"
    ftIniAddItem -p $rFilePathXbashDBUser -t learnCourseInfo -i $keyRepetionDrillErrorHository -l "${valRepetionDrillErrorHositorySort[*]}"
 
    ftEcho -s "${courseGroupNameSel} 课程:${courseNameSel}练习完成，正确率:$(printf "%d%%" $((courseTrueCount*100/courseSize)))\n错误ID:$(echo ${valRepetionDrillErrorHositorySort[*]})"
}

complete -W "-h --help --rely_install -p -l" -A file ftOcrRepetionDrill 
ftOcrRepetionDrill()
{
    local ftEffect=英语图片文本语音合成
    local isEnable=true

    #可用性校验
    [[ "$isEnable" != "true" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    local flag="."
    local sentence sentenceContent filePath sentenceHeaderFlag=0
    local valCount=4 errorContent arg arg2 # arg3 # arg4
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))}
    #eval arg3=\${$((i+2))} #; eval arg4=\${$((i+3))}
    case "${arg}" in
        # 说明参数解析部分 ==============
        --rely) ftEcho -rc "${ftEffect}" "的依赖说明" "\
#=========================================================
#    ${ftEffect}依赖包 $2
#    请尝试使用 ftOcrRepetionDrill --rely_install 补全依赖
#========================================================="; return ;;
        --rely_install)
            ftEcho -s "开始补全依赖"
            sudo apt-get install xxxx
            return ;;
        -h | --help) ftEcho -rc "${ftEffect}" "的使用示例" "\
#=========================================================
#    以下[参数对]无先后顺序可任意组合
#
#    ftOcrRepetionDrill -p 图片路径 -l 句子截取长度
#========================================================="; return ;;
        # 变量参数解析部分 ==============
        -p ) filePath="${arg2}"
            ;;
        -l ) sentenceHeaderFlag="${arg2}"
            ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done

    #依赖校验
    [[ -z $(which tesseract) ]] && ftOcrRepetionDrill --rely "tesseract-ocr-eng" && return $resultFail
    #参数校验
    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ ! -f "${filePath}" ] && errorContent="${errorContent}\\n[文件不存在]$filePath"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftOcrRepetionDrill -h && return $resultFail

    #实现主体
    local fileType=${filePath##*.}
    if [[ $fileType != "txt" ]]; then
        ftEcho -s "图片OCR处理中..."
        local filePathTemp=/tmp/ocrTemp
        if tesseract "${filePath}" "${filePathTemp}"; then
            filePath="${filePathTemp}.txt"
        else
            ftEcho -e "OCR处理失败"
            return
        fi
    fi

    ftEcho -s "句子切分中..."
    while read -u 3 -d "$flag" -a sentence;do
      if (( $sentenceHeaderFlag>0 )) && (( ${#sentence[@]}>$sentenceHeaderFlag )); then
          for (( i = 0; i < ${sentenceHeaderFlag}; i++ )); do
            eval word=\${sentence[$i]}
            sentenceContent="${sentenceContent} ${word}"
          done
      else
        sentenceContent=${sentence[@]}
      fi
      ftEcho -sn "开始合成下面句子语音： "
      echo "${sentenceContent}"
      ftEdgeTTs --speed 10 --playContent "${sentenceContent}" > /dev/null
      #重置缓存
      sentenceContent=

      ftEcho -s "是否继续下一句(回车继续/其他任意键取消)"
      read -n 1 sel
      [ -n "${sel}" ] && return
    done 3< $filePath
}

complete -W "-h --help -acg --ac" ftLearnCourseManage
ftLearnCourseManage()
{
    local ftEffect=学习课程配置
    local isEnable=true

    #可用性校验
    [[ "$isEnable" != "true" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    local isAddCourseGroup=false isAddCourse=false
    local learnCourseGroupList=($(ftIniGetValue  $rFilePathXbashDBUser learnCourseInfo  courseGroupList))
    local valCount=1 errorContent arg arg2
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))}
    case "${arg}" in
        -h | --help) ftEcho -rc "${ftEffect}" "的使用示例" "\
#=========================================================
#    以下[参数对]无先后顺序可任意组合
#
#    ftLearnCourseManage -h / --help 
#
#    #添加课程集
#    ftLearnCourseManage -acg 
#
#    #添加课程集对应的课程
#    ftLearnCourseManage -ac
#========================================================="; return ;;
        # 变量参数解析部分 ==============
        -acg) isAddCourseGroup=true
                     ;;
        -ac) isAddCourse=true
                     ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done

    #参数校验
    if (( $#!=$valCount )); then
        errorContent="${errorContent}\\n参数无效"
    elif ! $isAddCourseGroup  &&  ! $isAddCourse ;then
        errorContent="${errorContent}\\n参数无效"
    fi
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftLearnCourseManage -h && return $resultFail

    #实现主体
    if $isAddCourseGroup; then
        local dirPathTempEng=$(ftIniGetValue  $rFilePathXbashDBUser learnConfigInfo  dirPathRootExampleSentence)
        [[ -z $dirPathTempEng ]] && ftEcho -e "数据存放路径为空" && return
        ftEcho -r  "请输入课程集名称："
        read courseGroupName
        courseGroupName=$(echo $courseGroupName |sed s/[[:space:]]//g)
        learnCourseGroupList=(${learnCourseGroupList[@]} $courseGroupName)
        ftIniSetValue $rFilePathXbashDBUser learnCourseInfo  courseGroupList ${learnCourseGroupList[@]}
        ftIniAddItem -p $rFilePathXbashDBUser -t learnCourseInfo -i $courseGroupName -l "none"
        #创建课程文件夹
        mkdir -p ${dirPathTempEng}/$courseGroupName
        return
    fi
    if $isAddCourse; then
        local dirPathTempEng=$(ftIniGetValue  $rFilePathXbashDBUser learnConfigInfo  dirPathRootExampleSentence)
        [[ -z $dirPathTempEng ]] && ftEcho -e "数据存放路径为空" && return
        
        local courseGroupNameSel ListSize=0
        for dev in ${learnCourseGroupList[*]} ; do
            ((ListSize+=1))
        done
        if ((  $ListSize == 1 ));then
            courseGroupNameSel=$learnCourseGroupList
        else
            local index=0
            for dev in ${learnCourseGroupList[*]} ; do
                echo "[${index}] ${dev}"
                ((index+=1))
            done
            while true; do
                ftEcho -r  "请选择课程集[0~$(expr $ListSize - 1),q](回车默认0):"
                if (( $ListSize > 9 ));then
                    read dir
                else
                    read -n 1 dir
                fi
                #设定默认值
                 [ ${#dir} == 0 ] && dir=0
                 if [ ${dir} == "q" ]; then
                    return
                 elif (( $dir>=$ListSize  ));then
                    ftEcho -e "错误的选择：${dir}"
                    continue
                 elif [ -n "$(echo $dir| sed -n "/^[0-$ListSize]\+$/p")" ];then
                    courseGroupNameSel=${learnCourseGroupList[$dir]}
                    echo
                    break;
                 fi
                 ftEcho -e 错误的选择：$dir
            done
        fi

        ftEcho -r  "请输入课程名称："
        read courseName
        courseName=$(echo $courseName |sed s/[[:space:]]//g)

        local dirPathCourseGroup="${dirPathTempEng}/${courseGroupNameSel}"
        local filePathEnglishBasic="${dirPathCourseGroup}/${courseName}.english"
        local filePathChineseBasic="${dirPathCourseGroup}/${courseName}.chinese"
        local filePathExampleText="${dirPathCourseGroup}/${courseName}.exampleText"
        local filePathImitateText="${dirPathCourseGroup}/${courseName}.imitateText"
        if [[ -f $filePathEnglishBasic ]] || [[ -f $filePathChineseBasic ]]; then
            ftEcho -e "课程:${courseName}已存在"
            return
        fi

        if touch $filePathEnglishBasic $filePathChineseBasic $filePathExampleText $filePathImitateText; then
            XMODIFIERS=@im=fcitx GTK_IM_MODULE=xim gedit -s $filePathEnglishBasic $filePathChineseBasic $filePathExampleText $filePathImitateText
        else
            ftEcho -ex "创建课程文件失败"
            return;
        fi

        if [[ ! -s $filePathEnglishBasic ]] || [[ ! -s $filePathChineseBasic ]]; then
            ftEcho -s "在${courseGroupNameSel}下新建的课程${courseName}为空，将删除"
            rm $filePathEnglishBasic $filePathChineseBasic $filePathExampleText $filePathImitateText
            return
        fi
        [[ ! -s $filePathExampleText ]] && ftEcho -e "课程${courseName}的例文为空"
        [[ ! -s $filePathImitateText ]] && ftEcho -e "课程${courseName}的仿例文为空"

        local learnCourseList=($(ls $dirPathCourseGroup|grep chinese |  awk -F. '{print $1}'))
        if [[ -n $learnCourseList ]]; then
            # echo ${learnCourseList[@]}
            # echo "courseGroupNameSel=${courseGroupNameSel}"
            ftIniSetValue $rFilePathXbashDBUser learnCourseInfo  $courseGroupNameSel -l "${learnCourseList[*]}"
        fi

        ftEcho -s "在${courseGroupNameSel}下已新建课程${courseName}"
    fi
}
