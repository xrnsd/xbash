#!/bin/bash
#####---------------------  说明  ---------------------------#########
# 不可在此文件中出现不被函数包裹的调用或定义
# 这里只放函数

ftRestoreOperate()
{
    local ftEffect=根据备份包还原系统
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local filePathIniMaintain tagNameMaintain dirPathRestoreTarget
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftRestoreOperate -pm 工具数据库路径 -t 默认tag名 -d 还原的目标路径
#========================================================="; return ;;
        # 变量参数解析部分==============
        -pm )   filePathIniMaintain="${arg2}"           ;;
        -t )   tagNameMaintain="${arg2}"                 ;;
        -d )   dirPathRestoreTarget="${arg2}"           ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ ! -d "$dirPathRestoreTarget" ] && errorContent="${errorContent}\\n[还原的目标路径不存在]dirPathRestoreTarget=$dirPathRestoreTarget"
    [ -z "$tagNameMaintain" ] && errorContent="${errorContent}\\n[默认tag名为空]tagNameMaintain=$tagNameMaintain"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftRestoreOperate -h && return $resultFail

    #实现主体
    while true; do
    ftEcho -y "是否开始还原(回车默认y)"
    read -n 1 sel
    [ -z "${sel}" ] && sel=y
    case "$sel" in
        y | Y )
            local fileName=$(ftIniGetValue $filePathVersionInfoMaintain $tagNaeMaintain fileName)
            local dirPathStore=$(ftIniGetValue $filePathVersionInfoMaintain $tagNaeMaintain dirPathStore)
            local dirPathRestoreExclude=$(ftIniGetValue $filePathIniMaintain $tagNameMaintain dirPathRestoreExclude)
            local filePathVersion=${dirPathStore}/${fileName}

            [ ! -f $filePathVersion ] && ftEcho -e 未找到备份包:${filePathVersion} && return $resultFail
            sudo tar --use-compress-program=pigz -xvpf $filePathVersion --exclude=$dirPathRestoreExclude -C /
            break;;
        n | q )  exit;;
        * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
    esac
    done
}

ftRestoreChoiceSource()
{
    local ftEffect=选择还原使用的版本[备份]包
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local filePathIni filePathIniMaintain tagNameMaintain
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftRestoreChoiceSource -p 版本数据库路径 -pm 工具数据库路径 -t 默认tag名
#========================================================="; return ;;
        # 变量参数解析部分==============
            -p )   filePathIni="${arg2}"                        ;;
            -pm )   filePathIniMaintain="${arg2}"       ;;
            -t )   tagNameMaintain="${arg2}"            ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[备份包数据库文件不存在]filePathIni=$filePathIni"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$tagNameMaintain" ] && errorContent="${errorContent}\\n[默认tag名为空]tagNameMaintain=$tagNameMaintain"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftRestoreChoiceSource -h && return $resultFail

    #实现主体
    local suffixName=$(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo backupPackageSuffixName)
    local dirPathStore=$(ftIniGetValue $filePathIniMaintain $tagNameMaintain dirPathStore)
    local filePathList=($(find ${dirPathStore} -name "*.${suffixName}"))

    [ -z "$filePathList" ] && ftEcho -ex 在${dirPathStore}没找到有效的备份包 && exit

    ftEcho -bh 请${ftEffect}
    local index=0
    printf "%-2s %-36s %-50s\n\n" 序号 备份包版本号 版本备注
    for filePath in ${filePathList[*]} ; do
        local fileName=$(basename $filePath)
        local versionName=${fileName%.*}
        local note=$(ftIniGetValue $filePathIni $versionName backupPackageNote)
        note=${note:-'无效版本，无相关记录'}
        printf "[%-2d] %-30s %-50s\n" ${index} ${versionName} ${note}
        ((index+=1))
    done
    while true; do
        local index=0 itemCount=${#filePathList[@]}
        local num=$itemCount ; local length=0 ; while (( $num>0 )); do ((num=num/10 )) ; ((length+=1)) ; done
        ftEcho -r  "请输入备份包对应的序号(回车默认0):"
        read -n $length index &&echo
        [ ${#index} == 0 ] && index=0 #设定默认值
        if (( $itemCount<=$index ))||(( $index<0 ))||( ! echo -n $index | grep -q -e "^[0-9][0-9]*$");then
             ftEcho -e 错误的选择：$index ;echo  "请输入数字" && exit
        fi

        local filePath=${filePathList[$index]}
        [ ! -f "$filePath" ] && ftEcho -e  "备份包:${filePath}不存在" && continue

        local fileName=$(basename $filePath)
        local dirPathStore=$(dirname $filePath)
        ftIniSetValue $filePathIniMaintain $tagNameMaintain fileName "$fileName"
        ftIniSetValue $filePathIniMaintain $tagNameMaintain dirPathStore "$dirPathStore"
        break;
    done
}

ftSetBackupDevDir()
{
    local ftEffect=选择备份包存放的设备
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local editType filePathIni versionName
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#   选择存储备份包的设备路径
#    ftSetBackupDevDir -b -p 版本数据库路径 -v 版本号
#
#   选择读取备份包的设备路径
#    ftSetBackupDevDir -r -p 工具数据库路径 -v 默认tag
#========================================================="; return ;;
        # 变量参数解析部分==============
            -b )   editType=backup              ;;
            -r )   editType=restore              ;;
            -p )   filePathIni="${arg2}"        ;;
            -v )   versionName="${arg2}"    ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    ftInitDevicesList -s 8192M # 初始化设备列表[mXbashModuleDataDevicesList]
    [ -z "$rDirPathXbash" ] && errorContent="${errorContent}\\n[默认用户名为空]rUserName=$rUserName"
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[备份包数据库文件不存在]filePathIni=$filePathIni"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[备份包名为空]versionName=$versionName"
    [ -z "$mXbashModuleDataDevicesList" ] && errorContent="${errorContent}\\n[可用的备份包备份存储设备列表为空]mXbashModuleDataDevicesList=${mXbashModuleDataDevicesList[@]}"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSetBackupDevDir -h && return $resultFail

    #实现主体
    ftEcho -b 请${ftEffect}

    local devTarget devTargetDir devEffectiveSpace
    local index=0
    for dev in ${mXbashModuleDataDevicesList[*]} ; do
        devEffectiveSpace=$(ftDevAvailableSpace $dev)
        devEffectiveSpace=$(($devEffectiveSpace/1024))
        echo -n "[${index}] ";printf "%-25s  " $dev;echo "可用：${devEffectiveSpace}G"
        #echo [ ${index} ] $dev 可用$(ftDevAvailableSpace $dev)
        #echo [ ${index} ] ${mXbashModuleDataDevicesList[$index]}
        ((index+=1))
    done
    echo

    while true; do
        ftEcho -r  "请选择存放备份文件的设备[0~$(expr $index - 1),q](回车默认0):"
        if (( ${#mXbashModuleDataDevicesList[@]} > 9 ));then
            read dir
        else
            read -n 1 dir
        fi
        #设定默认值
         [ ${#dir} == 0 ] && dir=0
         if [ ${dir} == "q" ]; then
            exit
         elif [ -n "$(echo $dir| sed -n "/^[0-$index]\+$/p")" ];then
            devTargetDir=${mXbashModuleDataDevicesList[$dir]}
            echo
            break;
         fi
         ftEcho -e 错误的选择：$dir
    done

    case "$editType" in
    backup ) local dirPathStoreSource=${devTargetDir}/backup/os/${rUserName}/${versionName}
                    ;;
    restore ) local dirPathStoreSource=${devTargetDir}/backup/os/${rUserName}
                    [ ! -d $dirPathStoreSource ] && ftEcho -ex ${dirPathStoreSource}不存在,将退出 && return $resultFail
                    ;;
    esac
    # 写入数据
    ftIniSetValue $filePathIni $versionName dirPathStore "$dirPathStoreSource"
}

ftSetBackupType()
{
    local ftEffect=设定备份类型和备份忽略列表
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local filePathIni versionName filePathIniMaintain
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftSetBackupType -p 版本数据库路径 -v 版本名 -pm 工具数据库
#========================================================="; return ;;
        # 变量参数解析部分==============
            -p )   filePathIni="${arg2}"                        ;;
            -pm )   filePathIniMaintain="${arg2}"      ;;
            -v )   versionName="${arg2}"                    ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[版本数据库不存在]filePathIni=$filePathIni"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[备份包名为空]versionName=$versionName"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSetBackupType -h && return $resultFail

    #实现主体
    # 备份类型
    local infoBackupType=cg
    ftEcho -b 请${ftEffect}
    echo -e "[1]\t精简"
    echo -e "[2]\t基础"
    echo -e "[3]\t全部"
    echo

    while true; do
        ftEcho -r  "请选择备份类型(默认基础):"
        read -n 1 typeIndex
        echo

        [ ${#typeIndex} == 0 ] && typeIndex=1 #设定默认值
        case $typeIndex in
            1)        infoBackupType=jj; break;;
            2)        infoBackupType=cg; break;;
            3)        infoBackupType=bx; break;;
            n | q) exit;;
            * )       ftEcho -e 错误的选择：$typeIndex ;echo "输入1,2 选择    输入n，q离开";break;;
    esac;done
    # 写入数据,备份类型
    ftIniSetValue $filePathIni $versionName backupType $infoBackupType

    #备份忽略列表
    local dirsExclude index=0
    local filePatheExclude=$(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo filePatheExclude)
    local excludeListSys=($(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo dirPathsExcludeListSys))
    local excludeAllListSys=($(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo dirPathsExcludeAllListSys))
    local excludeListHomeRoot
    local excludeListHomeBase=($(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo dirPathsExcludeListHomeBase))

    for item in ${excludeListHomeBase[@]}; do
        excludeListHomeBase[$index]=${dirPathHome}/${item}
        excludeListHomeRoot[$index]=/root/${item}
        ((index+=1))
    done

    while true; do
        case $infoBackupType in
            jj)   dirsExclude=(${excludeListSys[@]} ${excludeListHomeBase[@]} ${excludeListHomeRoot[@]} ${excludeAllListSys[@]})
                    break;;
            cg)   dirsExclude=(${excludeListSys[@]} ${excludeListHomeBase[@]} ${excludeListHomeRoot[@]})
                    break;;
            bx)  dirsExclude=(${excludeListSys[@]})
                    break;;
            * )    ftEcho -ex  你想金包还是银包呢
                    exit;;
    esac;done

    ftEcho -sh 更新排除列表
    rm -rf $filePatheExclude > /dev/null
    for dirpath in ${dirsExclude[@]} ; do
     echo $dirpath >>$filePatheExclude
    done
}

ftSetRestoreOverryList()
{
    local ftEffect=选择还原时忽略的目录
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local filePathIniMaintain tagNameMaintain
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftSetRestoreOverryList -pm 工具数据库路径 -t 默认tag名
#========================================================="; return ;;
        # 变量参数解析部分==============
            -pm )   filePathIniMaintain="${arg2}"   ;;
            -t )   tagNameMaintain="${arg2}"         ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -d "$rDirPathUserHome" ] && errorContent="${errorContent}\\n[默认用户的home目录不存在]rDirPathUserHome=$rDirPathUserHome"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$tagNameMaintain" ] && errorContent="${errorContent}\\n[默认tag名为空]tagNameMaintain=$tagNameMaintain"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSetRestoreOverryList -h && return $resultFail

    #实现主体
    ftEcho -b 请${ftEffect}
    echo -e "[1]\t忽略home"
    echo -e "[2]\t不忽略"
    echo

    while true; do
        ftEcho -r  "请选择还原设置(回车默认忽略home):"
        read -n 1 typeIndex
        echo

        [ ${#typeIndex} == 0 ] && typeIndex=1 #设定默认值
        case $typeIndex in
            1) ftIniSetValue $filePathIniMaintain $tagNameMaintain dirPathRestoreExclude $rDirPathUserHome;break;;
            2) break;;
            n | q) exit;;
            * )        ftEcho -e 错误的选择：$typeIndex ;echo "选择输入1,2 离开输入n，q";break;;
    esac;done
}

ftBackupOs()
{
    local ftEffect=生成备份包
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local filePathIni versionName filePathIniMaintain
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftBackupOs -p 数据库路径
#========================================================="; return ;;
    -c)
        local filePathIni=$2
        local versionName=$3
        local dirPathStore=$(ftIniGetValue $filePathIni $versionName dirPathStore)
        [ -d "$dirPathStore" ] && rm -rf $dirPathStore
        local dirPathStoreParent=$(dirname  $dirPathStore)
        [ -z "$(ls $dirPathStoreParent)" ] && rm -rf $dirPathStoreParent
        ftIniDeleteTag -p $filePathIni -t $versionName
        return ;;
        # 变量参数解析部分==============
        -p )   filePathIni="$arg2"                        ;;
        -pm )   filePathIniMaintain="${arg2}"   ;;
        -v )   versionName="$arg2"                    ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[信息路径为空]filePathIni=$filePathIni"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[版本号为空]versionName=$versionName"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftBackupOs -h && return $resultFail

    #实现主体
    local fileNameVersion=$(ftIniGetValue $filePathIni  $versionName fileName)
    local dirPathStore=$(ftIniGetValue $filePathIni $versionName dirPathStore)
    local fileNameExclude=$(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo filePatheExclude)

    local filePathVersion=${dirPathStore}/${fileNameVersion}
    local filePathVersionLog=${dirPathStore}/${fileNameVersion%.*}.log
    while true; do
        ftEcho -y 是否开始备份[回车默认为y ]
        read -n 1 sel
        sel=${sel:-'y'}
        echo
        case "$sel" in
            y | Y )
                    #旧备份包处理
                        while [ -f $filePathVersion ]; do
                        ftEcho -y "备份包 ${fileName} 已存在,是否覆盖[回车默认为y ]"
                        read -n 1 sel
                        sel=${sel:-'y'}
                        echo
                        case "$sel" in
                            y | Y )
                                     rm -rf $dirPathStore
                                    break;;
                            n | q )  return ;;
                            * ) ftEcho -e 错误的选择：$sel
                            echo "输入n，q，离开";;
                        esac; done
                    #清理临时文件
                        apt-get autoclean
                        apt-get clean
                        apt-get autoremove
                        apt-get install -f
                        apt-get install deborphan -y
                        dpkg -l |grep ^rc|awk '{print $2}' | xargs dpkg -P
                        rm -rf /var/cache/apt/archives
                    #生成备份包
                        ftEcho -bh 开始${ftEffect}
                        [ ! -d $dirPathStore ] && mkdir -p $dirPathStore
                        tar --use-compress-program=pigz -cvPf $filePathVersion --exclude-from=$fileNameExclude /  2>&1 |tee $filePathVersionLog \
                            || ftBackupOs -c $filePathIni $versionName
                    #扫尾
                        rm $fileNameExclude>/dev/null
                        [ -d $dirPathStore ] && chmod 777 -R $dirPathStore
                        break;;
            n | q )  ftCleanUpInvalidRecords -p $filePathIni > dev/null ;return ;;
            * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
        esac; done
}

ftMaintainInfoNote()
{
    local ftEffect=记录备份包相关备注
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local editType filePathIni versionName
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#           ftMaintainInfoNote -a -p 版本数据库路径 -v 版本号
#========================================================="; return ;;
        # 变量参数解析部分==============
        -a )  editType=add                ;;
        -r )   editType=read              ;;
        -p )   filePathIni="$arg2"        ;;
        -v )   versionName="$arg2"    ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ -z "$editType" ] && errorContent="${errorContent}\\n[不知道要干啥]editType=$editType"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[备份包名为空]versionName=$versionName"
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[信息路径为空]filePathIni=$filePathIni"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftMaintainInfoNote -h && return $resultFail

    #实现主体
    if [[ "$editType" = "add" ]]; then
        local fileNameVersionNote="${versionName}的相应说明"
        local filePathVersionNote=/tmp/${fileNameVersionNote}
        if touch $filePathVersionNote ; then
            XMODIFIERS=@im=fcitx GTK_IM_MODULE=xim gedit -s $filePathVersionNote
        else
            ftEcho -ex "创建临时备注信息文件失败"
            return;
        fi
        note=$(cat $filePathVersionNote)
        note=$(echo $note |sed s/[[:space:]]/_/g)
        ftIniSetValue $filePathIni $versionName backupPackageNote "${note:-"默认"}"
        rm -rf $filePathVersionNote
    fi
}

ftSystemEnv()
{
    local ftEffect=记录和校验备份包软件和硬件信息
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local editType versionName filePathInfo
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#   记录备份包的系统软硬件信息
#    ftSystemEnv -a -v 版本号 -p 版本号对应信息存储路径
#
#   校验备份包是否兼容当前系统软硬件环境
#    ftSystemEnv -c -v 版本号 -p 版本号对应信息存储路径
#
#========================================================="; return ;;
        # 变量参数解析部分==============
        -a) editType=add                    ;;
        -c) editType=check                  ;;
        -v) versionName="$arg2"     ;;
        -p) filePathInfo="$arg2"        ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ -z "$editType" ] && errorContent="${errorContent}\\n[操作参数为空]editType=$editType"
    [ ! -f "$filePathInfo" ] && errorContent="${errorContent}\\n[没有相关版本信息文件]filePathInfo=$filePathInfo"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSystemEnv -h && return $resultFail

    #实现主体
    local infoHwCpu=$(echo $userPassword | sudo  -p '' -S dmidecode |grep -i cpu|grep -i version|awk -F ':' '{print $2}'|sed s/[[:space:]]//g)
    local infoHwMainboard=$(echo $userPassword | sudo  -p '' -S dmidecode |grep Name |sed s/[[:space:]]//g)
    local infoHwMainboard=$(echo $infoHwMainboard |sed s/[[:space:]]//g)
    local infoHw32x64=$(echo $userPassword | sudo  -p '' -S uname -m|sed s/[[:space:]]//g)
    local infoHwSystem=$(echo $userPassword | sudo  -p '' -S head -n 1 /etc/issue|sed s/[[:space:]]//g)
    infoHwSystem=${infoHwSystem//"\n\l"/}
    infoHwSystem=${infoHwSystem//"."/}
    infoHwSystem=${infoHwSystem//Ubuntu/Ubuntu__}

    if [[ -z "$infoHwCpu" ]]; then
        infoHwCpu="$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c|sed s/[[:space:]]//g)"
    fi

    local keyCpu=hwCpu keyMainboard=hwMainboard keySystemVersion=swSystemVersion keySystemType=swSystemType

    if [ ${editType} == "add" ]; then

        ftIniSetValue $filePathInfo $versionName $keyCpu $infoHwCpu
        ftIniSetValue $filePathInfo $versionName $keyMainboard $infoHwMainboard
        ftIniSetValue $filePathInfo $versionName $keySystemVersion $infoHwSystem
        ftIniSetValue $filePathInfo $versionName $keySystemType $infoHw32x64

        ftEcho -sh 版本${versionName}相关系统信息记录完成
        return
    fi

    if [ ${editType} == "check" ]; then

        ftEcho -bh 检查备份包和当前系统兼容程度

        local infoHwCpuVersion=$(ftIniGetValue  $filePathInfo $versionName $keyCpu)
        local infoHwMainboardVersion=$(ftIniGetValue  $filePathInfo $versionName $keyMainboard)
        local infoHwSystemVersion=$(ftIniGetValue  $filePathInfo $versionName $keySystemVersion)
        local infoHw32x64Version=$(ftIniGetValue  $filePathInfo $versionName $keySystemType)

        if [ -z "$infoHwCpuVersion" ]\
            ||[ -z "$infoHwMainboardVersion" ]\
            ||[ -z "$infoHwSystemVersion" ]\
            ||[ -z "$infoHw32x64Version" ]; then

            ftEcho -e   "版本相关系统信息损坏:\n${filePathInfo}"
            #显示相关信息存储路径
            echo infoHwCpuVersion=$infoHwCpuVersion
            echo infoHwMainboardVersion=$infoHwMainboardVersion
            echo infoHwSystemVersion=$infoHwSystemVersion
            echo infoHw32x64Version=$infoHw32x64Version
            return 9
        fi

        local returns
        if [[ $infoHwCpuVersion != $infoHwCpu ]];then
            echo versionpackageInfo=$infoHwCpuVersion
            echo tragetInfo=$infoHwCpu
            ftSel CPU
            returns=${returns}，忽略CPU变化
        fi
        if [[ "$infoHwMainboardVersion" != "$infoHwMainboard" ]]; then
            echo versionpackageInfo= $infoHwMainboardVersion
            echo tragetInfo=$infoHwMainboard
            ftSel 主板
            returns=${returns}，忽略主板变化
        fi
        if [[ "$infoHwSystemVersion" != "$infoHwSystem" ]]; then
            echo versionpackageInfo= $infoHwSystemVersion
            echo tragetInfo=$infoHwSystem
            ftEcho -e  系统版本不一致，将自动退出
            returns=不兼容
        fi
        if [[ "$infoHw32x64Version" != "$infoHw32x64" ]]; then
            echo versionpackageInfo= $infoHw32x64Version
            echo tragetInfo=$infoHw32x64
            ftEcho -e 系统版本的位数不一致，将自动退出
            returns=不兼容
        fi
        [ -n "$returns" ] && ftEcho -s "备份包：${versionName} 系统兼容性检测结果为${returns}" && return 9
        ftEcho -s "备份包：${versionName} 兼容当前系统"
    fi
}

ftSel()
{
    local ftEffect=备份包软件和硬件信息校验操作选择
    local isEnable=sub

    local title=$1
    local valCount=1
    (( $#!=$valCount ))||[ -z "$title" ] && ftEcho -ex "命令[${ftEffect}]参数错误"

    while true; do
    ftEcho -y "$1有变动,是否忽悠"
    read -n 1 sel
    case "$sel" in
        y | Y )    echo 已忽略$1;break;;
        n | q )   exit;;
        * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
    esac
    done
}

ftBackUpDevScanning()
{
    local ftEffect=备份设备扫描,同步
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] &&  ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local devList fileName filePathIni versionName
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#       ftBackUpDevScanning -p 版本数据库路径 -f 备份包文件名 -d 需要同步的设备路径列表
#========================================================="; return ;;
        # 变量参数解析部分==============
        -p )   filePathIni="${arg2}"
           ;;
        -d )   devList="${arg2}"
           ;;
        -f )   fileName="${arg2}"
                versionName=${fileName%.*}
           ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[版本数据库不存在]filePathIni=$filePathIni"
    [ -z "$fileName" ] && errorContent="${errorContent}\\n[目标备份包名为空]fileName=$fileName"
    [ -z "$devList" ] && errorContent="${errorContent}\\n[存放备份包的设备目录列表为空]devList=${devList[@]} "
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftBackUpDevScanning -h && return $resultFail

    #实现主体
    local dirPathStore=$(ftIniGetValue $filePathIni $versionName dirPathStore)

    for devDirPath in ${devList[@]}; do

        local dirPathTarget=${devDirPath}/backup/os/${rUserName}
        local filePathversionNameTarget=${dirPathTarget}/${fileName}
        if [ "$dirPathTarget" != "$dirPathStore" ] && [ -f "$filePathversionNameTarget" ];then
            while true; do
                ftEcho -y 在设备[${devDirPath}]上存在备份包[${versionName}],是否同步
                read -n 1 sel
                case "$sel" in
                    y | Y )
                        #可用性校验
                        [ -n "$(ftSystemEnv -c $versionName -p $filePathIni)" ] && ftEcho -e 设备[${devDirPath}]上的同名备份包[${versionName}]不兼容 && break

                        #复制备份包
                        local filePathVersion=${dirPathStore}/${fileName}
                        cp -rf -v $filePathversionNameTarget $filePathVersion

                        #清除权限限制
                        chmod 777 $filePathVersion ;;
                    n | q ) return ;;
                    * ) ftEcho -e 错误的选择：$sel
                         echo "输入n，q，离开";;
            esac; done
        fi
    done
}

ftSynchronous()
{
    local ftEffect=在不同设备间同步备份包
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local dirPathArray=$1 fileTypeList=$2
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftSynchronous -d \"设备路径列表\" -s \"文件后缀通配列表\"
#    ftSynchronous -d \"/media/data_xx /media/data_xx\" -s \".*\.info\|.*\.tgz\|.*\.notes\|.*\.md5s\|.*\.info\"
#========================================================="; return ;;
        # 变量参数解析部分==============
        -d )   dirPathArray="${arg2}"        ;;
        -s )   fileTypeList="${arg2}"           ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ -z "$fileTypeList" ] && errorContent="${errorContent}\\n[同步类型列表为空]fileTypeList=$fileTypeList"
    [ -z "$dirPathArray" ] && errorContent="${errorContent}\\n[同步设备目录列表为空]dirPathArray=${dirPathArray[@]}"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSynchronous -h && return $resultFail

    #实现主体
    while true; do
    ftEcho -y 是否开始同步
    read -n 1 sel
    case "$sel" in
        y | Y )
            ftEcho -bh 开始同步!

            for dirpath in ${dirPathArray[@]} ; do
                for dirpath2 in ${dirPathArray[@]} ; do
                    [ ${dirpath} == ${dirpath2} ] && continue
                    find $dirpath -regex "$fileTypeList" -exec cp {} -u -n -v -r $dirpath2 \;
                done
            done
            ftEcho -s 同步结束！
            break;;
        n | N| q |Q)  exit;;
        * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
    esac
    done
}

ftCleanUpInvalidRecords()
{
    local ftEffect=清除无效版本记录
    local isEnable=sub

    #可用性校验
    [ "$isEnable" != "true" ] && [ "$isEnable" != "sub" ] && ftEcho -s "${ftEffect} 已停用，请确认" && return
    #参数解析
    local filePathIni
    local errorContent arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))} ; case "${arg}" in
        # 说明参数解析部分==============
        -h | --help) ftEcho -rc "${ftEffect}" " 的使用示例" "\
#=========================================================
#    ftCleanUpInvalidRecords -p 版本数据库路径
#========================================================="; return ;;
        # 变量参数解析部分==============
        -p )   filePathIni="${arg2}"    ;;
    * ) [[ -z "${arg}" ]] && break ;; esac;done
    #参耦校验
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[备份包数据库文件不存在]filePathIni=$filePathIni"
    [ -n "$errorContent" ] && ftEcho -ea "命令[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftCleanUpInvalidRecords -h && return $resultFail

    #实现主体
    local result MD5 backupPackageNote
    for versionName in $(cat $filePathIni|grep "\[backup" ); do
         versionName=${versionName//\[/}
         versionName=${versionName//\]/}
         MD5=$(ftIniGetValue $filePathIni $versionName MD5)
         backupPackageNote=$(ftIniGetValue $filePathIni $versionName backupPackageNote)
        if [[ -z $MD5 ]] || [[ -z $backupPackageNote ]]; then
            ftIniDeleteTag -p $filePathIni -t $versionName
            result="deleted"
        fi
    done
    if [[ -n "$result" ]]; then
        ftEcho -s "删除部分无效版本记录"
    fi
}