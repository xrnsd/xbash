#!/bin/bash
#####-----------------------变量初始化-----------------------#########
exceptionContent=
diaNameLocal="xbash"
dirPathLocal=$(cd "$(dirname "$0")";pwd)
[[ -z "$SUDO_USER" ]] && userNameLocal=$USER || userNameLocal=$SUDO_USER
dirPathHomeLocal=/home/${userNameLocal}
resultSuccess=0 resultFail=1

#####-----------------------公共方法-----------------------#########
ftInitGitConfig()
{

    if [[ -z $(which git) ]];then
        ftInitEcho -e "git没有安装，请手动安装"
        exceptionContent="${exceptionContent}\n git配置初始化失败"
        return $resultFail
    fi

    filePathGitIgnore=${dirPathLocal}/.gitignore
    [ ! -f "$filePathGitIgnore" ] && touch $filePathGitIgnore

    filePathGitConfig=/home/${userNameLocal}/.gitconfig
    if [ ! -f "$filePathGitConfig" ];then
        echo -en "请输入git用户名:"
        read gitName&&git config --global user.name "$gitName"
        echo -en "请输入git邮箱或联系方式:"
        read gitemailUrl&&git config --global user.email "$gitemailUrl"
        ftInitEcho -s "已自动初始化gitconfig,需要修改的请查看$filePathGitConfig"

        #切换到独立分支
        local brachName="${userNameLocal}_$(date -d "today" +"%y%m%d%H%M%S")"
        brachName=$(echo $brachName |sed s/[[:space:]]//g)
        git checkout -b ${brachName}
    fi
}

ftInitUserConfig()
{

    local dirPathXbashConfigBashrc=${dirPathLocal}/config
    local dirPathXbashConfigBashrcUser=${dirPathXbashConfigBashrc}/user
    local dirPathXbashModuleexample=${dirPathLocal}/module/example
    local filePathXbashConfigExample=${dirPathXbashModuleexample}/user.config.example
    local filePathXbashConfigNew=${dirPathXbashConfigBashrcUser}/${userNameLocal}.config
    local filePathXbashConfigProfile=${dirPathXbashConfigBashrc}/profile.config
    local filePathHomeConfigProfile=${dirPathHomeLocal}/.profile

    if [[ -f "$filePathXbashConfigProfile" ]]; then
        cp -rf "${filePathXbashConfigProfile}" "${filePathHomeConfigProfile}"
    else
        exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败,${filePathXbashConfigProfile}未找到"
    fi

    [ ! -d "$dirPathXbashConfigBashrcUser" ] && mkdir $dirPathXbashConfigBashrcUser
    if [[ -f "$filePathXbashConfigExample" ]]; then
        cp $filePathXbashConfigExample $filePathXbashConfigNew

        if [ -n "${userPasswdLocal}" ];then
            local taguserPasswordBase="export\ userPassword="
            local taguserPasswordNew="export\ userPassword=$userPasswdLocal"
            sed -i "s:$taguserPasswordBase:$taguserPasswordNew:g" $filePathXbashConfigNew||exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败\n ${filePathXbashConfigExample} > ${filePathXbashConfigNew}"
        fi

        local tagisAutoUpdateBase="export\ isAutoUpdate=" \
        tagisAutoUpdateNew="export\ isAutoUpdate=true"
        if [ -n "${tagisAutoUpdateNew}" ];then
            ftInitEcho -y "是否启用xbash自动更新(回车默认y)"
            read -n 1 sel ; [ -z "${sel}" ] && sel=y
            if [[ "${sel}" = "y" ]];then
                sed -i "s:$tagisAutoUpdateBase:$tagisAutoUpdateNew:g" $filePathXbashConfigNew||\
                exceptionContent="${exceptionContent}\n xbash自动更新启用失败"
            fi
        fi

        local tagisUseCustomPS1Base="export\ isUseCustomPS1=" \
        tagisUseCustomPS1New="export\ isUseCustomPS1=true"
        if [ -n "${tagisUseCustomPS1New}" ];then
            ftInitEcho -y "是否启用xbash定义bash的命令行前缀(回车默认y)"
            read -n 1 sel ; [ -z "${sel}" ] && sel=y
            if [[ "${sel}" = "y" ]];then
                sed -i "s:$tagisUseCustomPS1Base:$tagisUseCustomPS1New:g" $filePathXbashConfigNew||\
                exceptionContent="${exceptionContent}\n 启用xbash定义bash的命令行前缀失败"
            fi
        fi

        local tagisUseXbashHistoryBase="export\ isUseXbashHistory=" \
        tagisUseXbashHistoryNew="export\ isUseXbashHistory=true"
        if [ -n "${tagisUseXbashHistoryNew}" ];then
            ftInitEcho -y "是否启用xbash定义的bash历史记录处理(回车默认y)"
            read -n 1 sel ; [ -z "${sel}" ] && sel=y
            if [[ "${sel}" = "y" ]];then
                sed -i "s:$tagisUseXbashHistoryBase:$tagisUseXbashHistoryNew:g" $filePathXbashConfigNew||\
                exceptionContent="${exceptionContent}\n xbash定义的bash历史记录处理启用失败"
            fi
        fi

        local tagisUseCustomAndroidDevEnvConfigBase="export\ isUseCustomAndroidDevEnvConfig=" \
        tagisUseCustomAndroidDevEnvConfigNew="export\ isUseCustomAndroidDevEnvConfig=true"
        if [ -n "${tagisUseCustomAndroidDevEnvConfigNew}" ];then
            ftInitEcho -y "是否启用xbash定义的Android开发环境基础配置(回车默认y)"
            read -n 1 sel ; [ -z "${sel}" ] && sel=y
            if [[ "${sel}" = "y" ]];then
                sed -i "s:$tagisUseCustomAndroidDevEnvConfigBase:$tagisUseCustomAndroidDevEnvConfigNew:g" $filePathXbashConfigNew||\
                exceptionContent="${exceptionContent}\n xbash定义的Android开发环境基础配置启用失败"
            fi
        fi

        local tagisUseBuildCcacheBase="export\ isUseBuildCcache=" \
        tagisUseBuildCcacheNew="export\ isUseBuildCcache=true"
        if [ -n "${tagisUseBuildCcacheNew}" ];then
            ftInitEcho -y "是否启用xbash定义的Android编译缓存配置(回车默认y)"
            read -n 1 sel ; [ -z "${sel}" ] && sel=y
            if [[ "${sel}" = "y" ]];then
                sed -i "s:$tagisUseBuildCcacheBase:$tagisUseBuildCcacheNew:g" $filePathXbashConfigNew||\
                exceptionContent="${exceptionContent}\n xbash定义的Android编译缓存配置启用失败"
            fi
        fi

       # local tagisUseDistccBase="export\ isUseDistcc=" \
       # tagisUseDistccNew="export\ isUseDistcc=true"
       # if [ -n "${tagisUseDistccNew}" ];then
       #     ftInitEcho -y "是否启用xbash定义的Android分布式编译配置(回车默认y)"
       #     read -n 1 sel ; [ -z "${sel}" ] && sel=y
       #     if [[ "${sel}" = "y" ]];then
       #         sed -i "s:$tagisUseDistccBase:$tagisUseDistccNew:g" $filePathXbashConfigNew||\
       #         exceptionContent="${exceptionContent}\n xbash定义的Android分布式编译配置启用失败"
       #     fi
       # fi
    else
        exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败,${filePathXbashConfigExample}未找到"
    fi
}

ftInitMoule()
{
    local filePathXbashConfigProfileNew=${dirPathLocal}/config/profile.config
    local filePathHomeLocalProfile=${dirPathHomeLocal}/.profile
    local filePathXbashModuleBashrcNew=${dirPathLocal}/main
    local filePathHomeLocalBashrc=${dirPathHomeLocal}/.bashrc
    local dirPathXbashModuleUser=${dirPathLocal}/module/user
    local filePathXbashModuleUser=${dirPathXbashModuleUser}/${userNameLocal}.module
    local dirPathLocal=$(pwd)

    [ ! -d "$dirPathXbashModuleUser" ] && mkdir -p $dirPathXbashModuleUser
    [ ! -f "$filePathXbashModuleUser" ] && echo "#! /bin/bash" > $filePathXbashModuleUser
    
    if [ -f "$filePathXbashConfigProfileNew" ]; then
        cd $dirPathHomeLocal
        [[ -f "$filePathHomeLocalProfile" ]] && [ $(readlink -f  $filePathHomeLocalProfile) != $filePathXbashConfigProfileNew ] \
             && mv ${filePathHomeLocalProfile} ${filePathHomeLocalProfile}_backup
        ln -sf ${filePathXbashConfigProfileNew} ${filePathHomeLocalProfile} \
             || exceptionContent="${exceptionContent}\n xbash基础配置添加失败"
    else
        exceptionContent="${exceptionContent}\n xbash基础配置添加失败,文件不存在:${filePathXbashConfigProfileNew}"
    fi
    
    if [ -f "$filePathXbashModuleBashrcNew" ]; then
        cd $dirPathHomeLocal
        [[ ! -f ${filePathHomeLocalBashrc}_backup ]] && [[ ! -L "$filePathHomeLocalBashrc" ]] \
        && mv ${filePathHomeLocalBashrc} ${filePathHomeLocalBashrc}_backup
        ln -sf $filePathXbashModuleBashrcNew .bashrc || exceptionContent="${exceptionContent}\n xbash模块初始化配置添加失败"
    else
        exceptionContent="${exceptionContent}\n xbash模块初始化配置添加失败,文件不存在:${filePathXbashModuleBashrcNew}"
    fi
    
    cd $dirPathLocal
}

ftInitInputrc()
{
    local fileNameXbashModuleBashrcInputrcTraget=.inputrc
    local filePathXbashModuleBashrcInputrc=${dirPathLocal}/module/base/bash_input.module
    local filePathHomeLocalConfigInputrc=${dirPathHomeLocal}/${fileNameXbashModuleBashrcInputrcTraget}
    local dirPathLocal=$(pwd)

    [ -z "${isUseXbashHistory}" ] && return $resultFail
    [[ !  -f "$filePathXbashModuleBashrcInputrc" ]] && exceptionContent="${exceptionContent}\n xbash配置的命令历史适配逻辑初始化失败" && return $resultFail

    cd $dirPathHomeLocal

    [[ -f "$filePathHomeLocalConfigInputrc" ]] && [ $(readlink -f  $filePathHomeLocalConfigInputrc) != $filePathXbashModuleBashrcInputrc ] &&\
        mv ${filePathHomeLocalConfigInputrc} ${filePathHomeLocalConfigInputrc}_backup
    ln -s $filePathXbashModuleBashrcInputrc $fileNameXbashModuleBashrcInputrcTraget

    cd $dirPathLocal
}

# ftinitUserPassword()
# {
#         userPasswdLocal=def_null
#         local status=1
#         stty -echo
#         while [[ status -ne "0" ]]; do
#             if [[ $userPasswdLocal != "def_null" ]]; then
#                 echo -e "\033[1;31m密码错误,请重新输入\033[0m";
#             fi
#             echo -en "请输入用户[$userNameLocal]对应的密码:"
#             read -s userPasswdLocal
#             echo $userPasswdLocal | sudo -p '' -S echo 2> /dev/null
#             status=$?
#         done||exceptionContent=" 用户信息配置初始化失败"
#         stty echo
# }

ftInitEcho()
{
    local ftEffect=工具信息提示

    while true; do case "$1" in
    -h | --help) ftInitEcho -sn "${ftEffect} " ; echo 的使用示例 ; echo -e "\
#=========================================================
#    ftInitEcho    -e     内容    # 错误信息显示，对字符串的缩进敏感
#    ftInitEcho    -y     内容    # 特定信息显示,y/n，对字符串的缩进敏感
#    ftInitEcho    -s     内容    # 执行信息，对字符串的缩进敏感
#    ftInitEcho    -sn   内容    # 执行信息,不换行，对字符串的缩进敏感
#========================================================="; return ;;
    * ) break;;esac;done

    local content option=$1 valList=$@
    option=${option:-'未制定显示信息'}
    if [ ${#valList[@]} -eq 2 ];then
        content=$(echo $content |sed s/[[:space:]]//g)
    else
        #除第一个参数外的所有参数列表，可正常打印数组
        content="${valList[@]/$option/}"
        content=${content/ /}
    fi
    while true; do case $option in
        -e )      echo -e "\033[1;31m$content\033[0m"; break;;
        -s )       echo -e "\033[1;33m$content\033[0m"; break;;
        -sn )     echo -en "\033[1;33m$content\033[0m"; break;;
        -y )       echo;echo -en "${content}[y/n]"; break;;
    * )    echo $option ;break;; esac ;done
}

ftInitXbash()
{
    local ftEffect=初始化xbash
    local isEnable=true

    while true; do case "$1" in
    -h | --help) ftInitEcho -sn "${ftEffect} " ; echo 的使用示例 ; echo -e "\
#=========================================================
#
#    ./init                            #初始化xbash所有配置
#    ./init --git                     #初始化xbash使用的git配置
#    ./init --userconfig        #初始化xbash的用户配置
#    ./init --module             #初始化xbash的module配置
#    ./init --inputrc              #初始化xbash的命令历史查找配置
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftInitEcho -s "${ftEffect} 已停用，请确认" && return
    #解参验耦
    if [[ -z "$1" ]];then #初始化所有配置
 
        #配置初始化
        ftInitGitConfig
        ftInitUserConfig
        ftInitMoule
        ftInitInputrc

        #结果显示
        echo
        if [[ -z "$exceptionContent" ]];then
            while true; do
            ftInitEcho -y "Xbash初始化成功,但需要注销重新登录才能生效，是否注销(回车默认y)"
            read -n 1 sel && echo ; [ -z "${sel}" ] && sel=y
            case "$sel" in
                y|Y) /usr/bin/gnome-session-quit --logout --force
                     break;;
                n|N|q|Q)  exit;;
                *) ftInitEcho -e 错误的选择：$sel ;echo "输入n，q，退出";;
            esac
            done
        else
            ftInitEcho -e "Xbash 初始化失败\n${exceptionContent}"
        fi
        return
    fi
    #根据参数初始化
    local index arg arg2 ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; eval arg2=\${$((i+1))}
    case "${arg}" in
        --git )ftInitGitConfig
                return ;;
        --userconfig )ftInitUserConfig
                return ;;
        --module )ftInitMoule
                return ;;
        --inputrc )ftInitInputrc
                return ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done
}

#####-----------------------开始初始化-----------------------#########
ftInitXbash $@
